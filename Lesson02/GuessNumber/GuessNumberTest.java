/*TODO  Модифицируйте программу Угадай число.
Создайте двух игроков, которые по очереди будут пытаться угадать число, загаданное компьютером.
ПОЯСНЕНИЕ: переход хода происходит после каждой неудачной попытки.
		   
Введите с клавиатуры в начале игры имена каждого игрока

Для продолжения/завершения работы программы выводите сообщение "Хотите продолжить? [да/нет]:". 
Если пользователь ввел ни "да" ни "нет", а что-то другое — снова выведите сообщение 
"Хотите продолжить? [да/нет]:". (Реализуйте эту логику в Test-классах)

Реализуйте класс GuessNumber, Player и GuessNumberTest
Класс Player должен иметь следующие поля и методы:
	String name — имя игрока (одного!)
	int number — введенное пользователем число
	геттеры/сеттеры (по необходимости)
Все объекты, создаваемые в программе, инициализируйте с помощью конструкторов
Для генерации псевдослучайного числа в диапазоне от 1 до 100 используйте Random или Math.random()
Используйте ввод с клавиатуры (класс Scanner)
Не забывайте указывать для полей и методов модификаторы доступа
*/

/*	Алгоритм решения.
	Создаем объекты-игроки класса Player и присваиваем им имена (через консоль), 
	задаем границы отрезка и количество игроков. Передаем эти параметры конструктору
	GuessNumber. В конструкторе: 
	генерим случайной число, которое требуется угадать. 
	реализуем процесс игры: ввод числа, проверка условий БольшеМеньшеРавно, переход хода к
	следующему игроку или вывод на экран сообщения об успешном угадывании.
	После успешного угадывания числа реализуем в Тест-классе проверку желания играть дальше
	Проверка прерывается на игроке, который отказывается продолжить игру и игра останавливается.
	Если все игроки хотят продолжить - загадывается новое число и игра повторяется.
*/
/*	Примечания
	Для решения использован массив и циклы, поэтому количество игроков не ограничено.
*/

import java.util.Scanner;

public class GuessNumberTest {
	public static void main(String[] args) {
		// Задаем отрезок
		int rangeBegin = 1;
		int rangeEnd = 100;

		// Задаем количество игроков. Игроки вводят имена с консоли
		int totalPlayers = 2;

		Player[] player = new Player[totalPlayers];
		Scanner sc = new Scanner(System.in);
		for (int i = 0; i < totalPlayers; i++) {
			System.out.print("Введите имя игрока №" + (i+1) +": ");
			player[i] = new Player(sc.next());
		}

		// запускаем игру. 
		// Получается матрешка из трех циклов
		// Большой цикл - из него выходим, если какой-то игрок отказался играть (choice == 'n')
		// Средний цикл - после каждой игры проверяем желание игроков поиграть ещё. Если все
		// хотят продолжить - то играем, если кто-то отказался, то choice == 'n' видится
		// в большом цикле и программа завершается.
		// Малый цикл - проверка корректности ввода [y/n]
		char choice = 'y'; // желание продолжить игру [y/n]
		int i;

		do {
			GuessNumber game = new GuessNumber(rangeBegin, rangeEnd, totalPlayers, player);
			// имеет ли смысл объявить перменнную game за циклом? Для экономии ресурсов или
			// увеличения быстродействия?

			System.out.println("Уважаемые игроки, можно повторить игру... хотите? [y/n]");
			
			// проверяем желание каждого игрока повторить игру. При первом же отрицательном
			// ответе завершаем программу.
			i = 0;
			while (choice == 'y' && i < totalPlayers) {
				System.out.print(player[i].getName() + "?\t");	
				choice = sc.next().charAt(0);
				while (choice != 'y' && choice != 'n') {
					System.out.println(player[i].getName() + " !!!Ошибка!!! Используйте [y/n]: ");
					choice = sc.next().charAt(0);
				}

				i++;
			}

		} while (choice == 'y');		

		System.out.println("Игра окончена");
	}
}